From d6356e03c367fa92c8912c73785979e3059acd12 Mon Sep 17 00:00:00 2001
From: Shivang P Swain <shivangswain@outlook.com>
Date: Tue, 5 May 2020 16:27:13 +0530
Subject: [PATCH] Create Patch File

---
 src/App.tsx   | 40 +++++++++++++++++++++++++++++-----------
 src/Graph.tsx | 15 +++++++++++++--
 2 files changed, 42 insertions(+), 13 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..0190e80 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,8 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  // makes sure the property showGraph is required whenever the object of class IState is passed
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +24,8 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      // initialises the App without the graph
+      showGraph: false,
     };
   }
 
@@ -29,18 +33,35 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    // render Graph when render method is called and showGraph is true
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    // define an interval of fixed time delay using setInterval method
+    const interval = setInterval(() => {
+      // stream data from server
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state using setState to create a pending state transition instead of mutating this.state directly
+        this.setState ({
+          // Creating a new array of data that consists of previous data in the state and the new data from server
+          data: serverResponds,
+          // Updating the graph state to call the render method and display the graph
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        // cancelling the previously established repeating action set be setInterval call
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
@@ -54,11 +75,8 @@ class App extends Component<{}, IState> {
         </header>
         <div className="App-content">
           <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
-            // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
+            // When button is clicked, our react app tries to request new data from the server.
+            // As part of your task, update the getDataFromServer() function to keep requesting the data every 100ms until the app is closed or the server does not return anymore data.
             onClick={() => {this.getDataFromServer()}}>
             Start Streaming Data
           </button>
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..d6e080e 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,17 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', `
+      {
+        "stock":"distinct count",
+        "top_ask_price":"avg",
+        "top_bid_price":"avg",
+        "timestamp":"distinct count"
+      }`);
     }
   }
 
-- 
2.26.2.windows.1

